using Common.Domain.Base;
using Common.Domain.Interfaces;
using Common.Dto;
using <#namespace#>.Application.Interfaces;
using <#namespace#>.Domain.Entitys;
using <#namespace#>.Domain.Filter;
using <#namespace#>.Domain.Interfaces.Services;
using <#namespace#>.Dto;
using System.Threading.Tasks;
using Common.Domain.Model;

namespace <#namespace#>.Application
{
    public class <#className#>ApplicationServiceBase : ApplicationServiceBase<<#className#>, <#className#>Dto, <#className#>Filter>, I<#className#>ApplicationService
    {
        protected readonly ValidatorAnnotations<<#className#>Dto> _validatorAnnotations;
        protected readonly I<#className#>Service _service;
		protected readonly CurrentUser _user;

        public <#className#>ApplicationServiceBase(I<#className#>Service service, IUnitOfWork uow, ICache cache, CurrentUser user) :
            base(service, uow, cache)
        {
            base.SetTagNameCache("<#className#>");
            this._validatorAnnotations = new ValidatorAnnotations<<#className#>Dto>();
            this._service = service;
			this._user = user;
        }

        protected override <#className#> MapperDtoToDomain<TDS>(TDS dto)
        {
			var _dto = dto as <#className#>DtoSpecialized;
            this._validatorAnnotations.Validate(_dto);
            this._serviceBase.AddDomainValidation(this._validatorAnnotations.GetErros());
			var domain = new <#className#>.<#className#>Factory().GetDefaultInstance(_dto, this._user);
            return domain;
        }

        protected override async Task<<#className#>> AlterDomainWithDto<TDS>(TDS dto)
        {
			return await Task.Run(() =>
            {
				var _dto = dto as <#className#>Dto;
				var domain = new <#className#>.<#className#>Factory().GetDefaultInstance(_dto, this._user);
				return domain;
			});
        }

    }
}
